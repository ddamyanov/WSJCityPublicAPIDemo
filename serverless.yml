service: serverless-stack

frameworkVersion: ">=1.1.0 <2.0.0"
plugins:
  - serverless-mocha-plugin
  # - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs6.10
  # http://forum.serverless.com/t/getting-handle-accountid-in-serverless-config/946/8
  # by default AWS variables like ${saml:sub} use same format as Serverless variables like ${self:custom.prefix}
  # We use variableSyntax here to change serverless vars to look instead like ${{self:custom.prefix}}
  variableSyntax: '\${{(((?!\${{).)+?)}}'
  versionFunctions: false
  memorySize: 512
  timeout: 10
  region: eu-west-2
  stage: v1
  environment:
    STORIES_DYNAMODB_TABLE: ${{self:service}}-${{opt:stage, self:provider.stage}}-stories
    FEEDS_DYNAMODB_TABLE: ${{self:service}}-${{opt:stage, self:provider.stage}}-feeds
    FEED_IDENTIFIER_DYNAMODB_GSI: ${{self:service}}-${{opt:stage, self:provider.stage}}-feed-identifier
    REGION: ${{self:provider.region}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:BatchGetItem
      Resource: ["arn:aws:dynamodb:${{opt:region, self:provider.region}}:*:table/${{self:provider.environment.STORIES_DYNAMODB_TABLE}}", "arn:aws:dynamodb:${{opt:region, self:provider.region}}:*:table/${{self:provider.environment.FEEDS_DYNAMODB_TABLE}}", "arn:aws:dynamodb:${{opt:region, self:provider.region}}:*:table/${{self:provider.environment.FEEDS_DYNAMODB_TABLE}}/index/*"]
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource: ["*"]
    - Effect: Allow
      Action: 
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:DescribeLogGroups
        - logs:DescribeLogStreams
        - logs:PutLogEvents
        - logs:GetLogEvents
        - logs:FilterLogEvents
      Resource: ["*"]
      
functions:

  authorizer:
    handler: functions/authorizer.allow
  replay:
    handler: functions/replay.replay
    events:
      - http:
          path: replay
          method: get
          cors: true
          authorizer: authorizer
  # stories-get:
  #   handler: functions/stories.get
  # stories-put:
  #   handler: functions/stories.put
  # story-get:
  #   handler: functions/story.get
  # story-put:
  #   handler: functions/story.put

resources:
  Resources:
    ApiGatewayCloudWatchLogsRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - 
              Effect: Allow
              Principal:
                Service: ["apigateway.amazonaws.com"]
              Action: ["sts:AssumeRole"]
        Policies: 
          -
            PolicyName: ApiGatewayLogsPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:DescribeLogGroups
                    - logs:DescribeLogStreams
                    - logs:PutLogEvents
                    - logs:GetLogEvents
                    - logs:FilterLogEvents
                  Resource: ["*"]
    ApiGatewayAccount:
      Type: AWS::ApiGateway::Account
      Properties: 
        CloudWatchRoleArn:
          Fn::GetAtt: ["ApiGatewayCloudWatchLogsRole", "Arn"]
    WSJCityAPI:
      Type: AWS::ApiGateway::RestApi
      Properties: 
        Name: WSJ City API
        Description: API used for WSJ City requests
        FailOnWarnings: true
        Body: ${{file(swagger.json)}}
    WSJCityAPIApiGatewayDeployment:
      Type: AWS::ApiGateway::Deployment
      Properties:
        RestApiId:
          Ref: WSJCityAPI
    WSJCityAPIApiGatewayStage:
      Type: "AWS::ApiGateway::Stage"
      Properties: 
        StageName: ${{opt:stage, self:provider.stage}}
        Description: "Stage description"
        RestApiId: 
          Ref: WSJCityAPI
        DeploymentId: 
          Ref: WSJCityAPIApiGatewayDeployment
        CacheClusterEnabled: false
        CacheClusterSize: 0.5
        Variables: 
          V1: "V1"
        MethodSettings: 
          - 
            ResourcePath: "/*"
            HttpMethod: "*"
            MetricsEnabled: true
            DataTraceEnabled: true
            LoggingLevel: "INFO"
            CacheTtlInSeconds: 300
            CachingEnabled: false
          # - 
          #   ResourcePath: "/*"
          #   HttpMethod: "POST"
          #   MetricsEnabled: true
          #   DataTraceEnabled: true
          #   LoggingLevel: "INFO"
          #   CacheTtlInSeconds: 300
          #   CachingEnabled: false
          # - 
          #   ResourcePath: "/*"
          #   HttpMethod: "PUT"
          #   MetricsEnabled: true
          #   DataTraceEnabled: true
          #   LoggingLevel: "INFO"
          #   CacheTtlInSeconds: 300
          #   CachingEnabled: false

    ReplayLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties: 
        FunctionName: 
          Fn::GetAtt: 
            - ReplayLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Sub:
            - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WSJCityAPI}/*/*"
            - WSJCityAPI:
                Ref: WSJCityAPI

    AuthorizerLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties: 
        FunctionName: 
          Fn::GetAtt: 
            - ReplayLambdaFunction
            - Arn
        Action: "lambda:InvokeFunction"
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Sub:
            - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WSJCityAPI}/*/*"
            - WSJCityAPI:
                Ref: WSJCityAPI

    StoriesDB:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: storyIdentifier
            AttributeType: S
        KeySchema:
          -
            AttributeName: storyIdentifier
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 20
          WriteCapacityUnits: 20
        TableName: ${{self:provider.environment.STORIES_DYNAMODB_TABLE}}
    FeedsDB:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: hashKey
            AttributeType: S
          -
            AttributeName: feedIdentifier
            AttributeType: S
          -
            AttributeName: storyPosition
            AttributeType: N
        KeySchema:
          -
            AttributeName: hashKey
            KeyType: HASH
        GlobalSecondaryIndexes:
          -
            IndexName: ${{self:provider.environment.FEED_IDENTIFIER_DYNAMODB_GSI}}
            KeySchema:
              -
                AttributeName: feedIdentifier
                KeyType: HASH
              -
                AttributeName: storyPosition
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 15
              WriteCapacityUnits: 15
        ProvisionedThroughput:
          ReadCapacityUnits: 15
          WriteCapacityUnits: 15
        TableName: ${{self:provider.environment.FEEDS_DYNAMODB_TABLE}}